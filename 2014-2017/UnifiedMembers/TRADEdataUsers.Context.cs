//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TradeDataUsers
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TRADEdataUsersEntities : DbContext
    {
        public TRADEdataUsersEntities()
            : base("name=TRADEdataUsersEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<History> Histories { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<FailedAttemptsUser> FailedAttemptsUsers { get; set; }
        public virtual DbSet<IPAddress> IPAddresses { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<Referrer> Referrers { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
    
        public virtual int OpenPasswordsKey()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OpenPasswordsKey");
        }
    
        public virtual int UserDelete(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDelete", userIdParameter);
        }
    
        public virtual int UserInsert(Nullable<int> companyId, string firstName, string lastName, string userName, string password, Nullable<System.DateTime> accountExpirationDate)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var accountExpirationDateParameter = accountExpirationDate.HasValue ?
                new ObjectParameter("accountExpirationDate", accountExpirationDate) :
                new ObjectParameter("accountExpirationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserInsert", companyIdParameter, firstNameParameter, lastNameParameter, userNameParameter, passwordParameter, accountExpirationDateParameter);
        }
    
        public virtual int UserUpdate(Nullable<int> userId, Nullable<int> companyId, string firstName, string lastName, string userName, string password, Nullable<System.DateTime> accountExpirationDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var accountExpirationDateParameter = accountExpirationDate.HasValue ?
                new ObjectParameter("accountExpirationDate", accountExpirationDate) :
                new ObjectParameter("accountExpirationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserUpdate", userIdParameter, companyIdParameter, firstNameParameter, lastNameParameter, userNameParameter, passwordParameter, accountExpirationDateParameter);
        }
    
        public virtual int AuthenticateUser(string username, string password, Nullable<bool> checkIp, string ipAddress, string host, ObjectParameter userId, ObjectParameter isValid, ObjectParameter retVal)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var checkIpParameter = checkIp.HasValue ?
                new ObjectParameter("checkIp", checkIp) :
                new ObjectParameter("checkIp", typeof(bool));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("host", host) :
                new ObjectParameter("host", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthenticateUser", usernameParameter, passwordParameter, checkIpParameter, ipAddressParameter, hostParameter, userId, isValid, retVal);
        }
    
        public virtual int AuthorizeUser(string username, string applicationId, ObjectParameter isAllowed)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var applicationIdParameter = applicationId != null ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuthorizeUser", usernameParameter, applicationIdParameter, isAllowed);
        }
    
        public virtual int IsAllowedIpAddress(string ipAddress, Nullable<int> siteId, Nullable<bool> isAdminIp, ObjectParameter isValid)
        {
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("siteId", siteId) :
                new ObjectParameter("siteId", typeof(int));
    
            var isAdminIpParameter = isAdminIp.HasValue ?
                new ObjectParameter("isAdminIp", isAdminIp) :
                new ObjectParameter("isAdminIp", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IsAllowedIpAddress", ipAddressParameter, siteIdParameter, isAdminIpParameter, isValid);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> ResetSessionId(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("ResetSessionId", usernameParameter);
        }
    
        public virtual int SetSessionExpired(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetSessionExpired", usernameParameter);
        }
    
        public virtual int SyncUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SyncUsers");
        }
    }
}
