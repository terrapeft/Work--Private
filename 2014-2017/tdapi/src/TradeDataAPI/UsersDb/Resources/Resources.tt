<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.ServiceModel" #>
<#@ assembly name="$(ProjectDir)bin\$(ConfigurationName)\UsersDb.dll" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="System.IO" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.ServiceModel" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="UsersDb.DataContext" #>
<#@ output extension="cs" #>
<#
	var doc = XElement.Load(Host.ResolvePath(@"..\app.config"));
	var cnElem = doc.Elements("connectionStrings").Elements().FirstOrDefault(cn => cn.Attribute("name").Value == "UsersEntities");
	var connectionString = cnElem.Attribute("connectionString").Value;
	
	var dc = new UsersDataContext(connectionString);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UsersDb
{
	using System.Linq;
	using System.ServiceModel;
	using System.Threading.Tasks;
    using UsersDb.DataContext;

	using SharedLibrary.Cache;

	public class Resources
	{
		private const string NO_RESOURCE_FOUND = "Resource string was not found.";
		private static UsersDataContext dataContext = new UsersDataContext();
		private static object _lock = new object();

		public static void PreloadAsync()
		{
		    Task.Factory.StartNew(() =>
            {
<#
	foreach (var sc in dc.Resources) {

	if (sc.ResourceType.Name == "String") { #>
				GetString(<#= sc.Id #>);
<#
	}
	else if (sc.ResourceType.Name == "Int") { #>
				GetInt(<#= sc.Id #>);
<#
	}
	else if (sc.ResourceType.Name == "String List") { #>
				GetStringList(<#= sc.Id #>);
<# }}
#>
            });
		    
            Task.WaitAll();
		}

<#
	foreach (var rs in dc.Resources) {
#>
		/// <summary>
		/// <#= (rs.Description ?? string.Empty).Replace("\n", "\n\t\t/// ") #>
		/// </summary>
		public static string <#=rs.Name.Replace(" ", "_")#> { get { return GetString(<#= rs.Id #>); } }

<#
	}
#>

		private static string GetString(int id)
		{
			return CacheHelper.Get<string>("Resource" + id, () =>
			{
				lock (_lock)
				{
					var val = dataContext.Resources.Where(r => !r.IsDeleted).FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value;
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

	}
}

<#+ 

public string AssemblyDirectory()
{
    string codeBase = Assembly.GetExecutingAssembly().CodeBase;
    UriBuilder uri = new UriBuilder(codeBase);
    string path = Uri.UnescapeDataString(uri.Path);
    return Path.GetDirectoryName(path);
}
 #>