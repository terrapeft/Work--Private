//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UsersDb
{
	using System;
	using System.Linq;
	using System.ServiceModel;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using UsersDb.DataContext;

	using SharedLibrary.Cache;

	public class ServiceConfig
	{
		private static object _lock = new object();
		private const string NO_RESOURCE_FOUND = "Requested string was not found.";
		private static UsersDataContext dataContext = new UsersDataContext();

		public static void PreloadAsync()
		{
            Task.Factory.StartNew(() =>
            {
				GetString(1);
				GetBoolean(2);
				GetString(3);
				GetInt(4);
				GetString(5);
				GetString(6);
				GetString(11);
				GetInt(12);
				GetString(14);
				GetInt(18);
				GetInt(22);
				GetInt(23);
				GetInt(24);
				GetInt(33);
				GetStringList(34, false);
				GetString(42);
				GetString(43);
				GetString(44);
				GetString(45);
				GetStringList(46, true);
				GetString(47);
				GetStringList(48, false);
				GetStringList(49, false);
				GetString(50);
				GetString(51);
				GetString(58);
				GetString(59);
				GetString(60);
				GetString(61);
				GetString(62);
				GetString(63);
				GetString(64);
				GetString(65);
				GetString(71);
				GetString(72);
				GetInt(73);
				GetString(75);
				GetInt(76);
				GetString(77);
				GetIntegerList(78);
				GetString(79);
				GetString(80);
				GetString(82);
				GetString(84);
				GetString(85);
				GetString(86);
				GetString(87);
				GetString(88);
				GetString(89);
				GetString(90);
				GetString(91);
				GetString(92);
				GetString(93);
            });
		    
            Task.WaitAll();
		}


		/// <summary>
		/// Is used in the FROM field.
		/// </summary>
		public static string Smtp_Sender { get { return GetString(1); } }

		/// <summary>
		/// This option should be set to True if TLS is enabled.
		/// </summary>
		public static bool Enable_SSL { get { return GetBoolean(2); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Smtp_Host { get { return GetString(3); } }

		/// <summary>
		/// 
		/// </summary>
		public static int Smtp_Port { get { return GetInt(4); } }

		/// <summary>
		/// Email(s) of person(s) in charge to receive notifications from the system.
		/// </summary>
		public static string Smtp_Recipients { get { return GetString(5); } }

		/// <summary>
		/// URL of the web service which provides geolocation details about requested IP.
		/// The expected output is:
		/// 
		/// {
		///   "geoplugin_countryName":"Spain",
		///   "geoplugin_continentCode":"EU"
		/// }
		/// 
		/// It may contain more properties, but only these two are required.
		/// </summary>
		public static string IP_Lookup_URL { get { return GetString(6); } }

		/// <summary>
		/// When service method returns several tables, and format is CSV, this is a text before each table.
		/// </summary>
		public static string CSV_Convertor_Tables_Separator { get { return GetString(11); } }

		/// <summary>
		/// Number of failed attempts before a user is got locked
		/// </summary>
		public static int Max_Login_Attempts { get { return GetInt(12); } }

		/// <summary>
		/// This email is used on Error.aspx page in suggestion to contact administrator.
		/// </summary>
		public static string Error_500_Contact_Person { get { return GetString(14); } }

		/// <summary>
		/// Maximum number of suggestions for Search.
		/// </summary>
		public static int Prediction_Number_Of_Suggestions { get { return GetInt(18); } }

		/// <summary>
		/// Minimal length of search string to activate autocomplete feature.
		/// </summary>
		public static int Prediction_Min_Length { get { return GetInt(22); } }

		/// <summary>
		/// In UI - how many results to return from service and show on page.
		/// In Service - how many results to return for request without specified Page Size parameter (ps).
		/// </summary>
		public static int Search_Results_Page_Size { get { return GetInt(23); } }

		/// <summary>
		/// Time in minutes to refresh the Admin's home page. Not in use at the moment.
		/// </summary>
		public static int Home_Page_Refresh_Interval { get { return GetInt(24); } }

		/// <summary>
		/// Starts With = 1
		/// Ends With = 2
		/// Contains = 3
		/// Equals = 4
		/// </summary>
		public static int Default_Search_Option { get { return GetInt(33); } }

		/// <summary>
		/// 0 for all, otherwise group ids separated by comma, e.g.: 121,134,12
		/// </summary>
		public static List<string> Default_Search_Groups { get { return GetStringList(34, false); } }

		/// <summary>
		/// The name of the archive (zip), which is send to user in response for export request.
		/// 
		/// Placeholder is for date, check the CUI Export Date Format in this section.
		/// </summary>
		public static string CUI_Export_Archive_Filename { get { return GetString(42); } }

		/// <summary>
		/// Used for archive file name.
		/// </summary>
		public static string CUI_Export_Date_Format { get { return GetString(43); } }

		/// <summary>
		/// The name of the file inside the archive for series data.
		/// 
		/// File name will be appeneded with extension appropriate to chosen format.
		/// </summary>
		public static string CUI_Export_Series_Filename { get { return GetString(44); } }

		/// <summary>
		/// The name of the file inside the archive for root data.
		/// 
		/// File name will be appeneded with extension appropriate to chosen format.
		/// </summary>
		public static string CUI_Export_Root_Filename { get { return GetString(45); } }

		/// <summary>
		/// URL parameters for search requests are not meaningful, so mapping allows to change them to something readable, when looking into statistics.
		/// </summary>
		public static List<string> Search_Keys_Aliases { get { return GetStringList(46, true); } }


		/// <summary>
		/// Help template for the GetBySymbol pseudo method, which actually stands for the search call.
		/// 
		/// Notice the placeholder for a default comparison type.
		/// </summary>
		public static string GetBySymbol_API_Help { get { return GetString(47); } }

		/// <summary>
		/// A way to exclude columns from search and from results set for series table.
		/// </summary>
		public static List<string> Exclude_Series_Columns { get { return GetStringList(48, false); } }

		/// <summary>
		/// A way to exclude columns from search and from results set for series table.
		/// </summary>
		public static List<string> Exclude_Root_Columns { get { return GetStringList(49, false); } }

		/// <summary>
		/// Used in the overridden ToString method of the corresponding EF entity.
		/// 
		/// {0} is for Id, {1} is for packages list.
		/// </summary>
		public static string SubscriptionRequest_ToString_Template { get { return GetString(50); } }

		/// <summary>
		/// Used in several places, when html output should have a new line.
		/// </summary>
		public static string New_Line { get { return GetString(51); } }

		/// <summary>
		/// Update template for Audit Parameter to format output before showing in the grid.
		/// 
		/// {0} is for parameter name
		/// {1} is for original value
		/// {2} is for new value
		/// </summary>
		public static string Original_To_New_Template { get { return GetString(58); } }

		/// <summary>
		/// Template for different purposes, when a key-value pair should be formatted for output.
		/// 
		/// {0} is for parameter name
		/// {1} is for parameter value
		/// </summary>
		public static string Key_Value_Template { get { return GetString(59); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Subscription_Request_Subject { get { return GetString(60); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Subscription_Request_Body { get { return GetString(61); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Subscription_Request_Accepted_Notification_Subject { get { return GetString(62); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Subscription_Request_Accepted_Notification_Body { get { return GetString(63); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Subscription_Request_Declined_Notification_Subject { get { return GetString(64); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Subscription_Request_Declined_Notification_Body { get { return GetString(65); } }

		/// <summary>
		/// If user did not provide company and IP lookup failed this Country Id will be assigned. Must be a CODE from the [Service Data/Countries] table.
		/// </summary>
		public static string Trial_Default_Country_Code { get { return GetString(71); } }

		/// <summary>
		/// The value must match one of the [Service Data/Threshold Periods] NAMES.
		/// </summary>
		public static string Trial_Default_Threshold_Period { get { return GetString(72); } }

		/// <summary>
		/// Number Of Requests Per Trial Threshold Period.
		/// </summary>
		public static int Trial_Default_Hits_Limit { get { return GetInt(73); } }

		/// <summary>
		/// Must be a CODE from the [Service Data/Time Zones].
		/// </summary>
		public static string Trial_Default_Time_Zone { get { return GetString(75); } }

		/// <summary>
		/// How many days the trial user will have access, starting from the moment of subscription.
		/// </summary>
		public static int Trial_Period_In_Days { get { return GetInt(76); } }

		/// <summary>
		/// NAME of the template to use for email notification from [System Settings/Email Templates]
		/// </summary>
		public static string Trial_Notification_Email_Template { get { return GetString(77); } }

		/// <summary>
		/// Password length is a sum of upper and lower case
		/// characters plus numbers.
		/// 
		///  - the first number stands for lower case,
		///  - the second number stands for uppe case,
		///  - the third number stands for digits
		/// </summary>
		public static List<int> Trial_Password_Length { get { return GetIntegerList(78); } }

		/// <summary>
		/// HTML or TEXT
		/// 
		/// In order this setting change (and any other) take effect the session should be restrated.
		/// </summary>
		public static string Trial_Notification_Email_Format { get { return GetString(79); } }

		/// <summary>
		/// The SQL Server mail profile to use.
		/// </summary>
		public static string Trial_SQL_Server_Mail_Profile { get { return GetString(80); } }

		/// <summary>
		/// The root path of the service.
		/// </summary>
		public static string TradeData_API_Service_URL { get { return GetString(82); } }

		/// <summary>
		/// Anywhere, where contact email required.
		/// </summary>
		public static string Contact_Information_Email { get { return GetString(84); } }

		/// <summary>
		/// Anywhere, where a contact email required.
		/// </summary>
		public static string Contact_Information_Phone { get { return GetString(85); } }

		/// <summary>
		/// Email template contains examples of TD API queries, this parameter allows to specify the method name to use. 
		/// 
		/// This method must be a member of one of trial packages, otherwise it will be unavailable for users.
		/// </summary>
		public static string Trial_Method_For_Email_Links { get { return GetString(86); } }

		/// <summary>
		/// TradeData email(s) to send notifications about new trial requests
		/// </summary>
		public static string Trial_Notification_Subscriber { get { return GetString(87); } }

		/// <summary>
		/// This is the link to the Symbolofy login page (note that there is the Statix login page, which is not the same, regardless of the fact they look same and behave in the same way on the first glance)
		/// </summary>
		public static string Trial_Activation_Link { get { return GetString(88); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Search_Results_Order_By_Column { get { return GetString(89); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Search_Results_Order_By_Direction { get { return GetString(90); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Database_Mail_Profile_Name { get { return GetString(91); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Series_Order_By { get { return GetString(92); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Series_Order_By_Direction { get { return GetString(93); } }

		private static string GetString(int id)
		{
			return CacheHelper.Get<string>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
                    dataContext = new UsersDataContext();
					var val = dataContext.ServiceConfigurations.Where(s => !s.IsDeleted).FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value;
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static bool GetBoolean(int id)
		{
			return CacheHelper.Get<bool>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
                    dataContext = new UsersDataContext();
					var val = dataContext.ServiceConfigurations.Where(s => !s.IsDeleted).FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return Convert.ToBoolean(val.Value);
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static int GetInt(int id)
		{
			return CacheHelper.Get<int>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
                    dataContext = new UsersDataContext();
					var val = dataContext.ServiceConfigurations.Where(s => !s.IsDeleted).FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return Convert.ToInt32(val.Value);
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static List<string> GetStringList(int id, bool strict)
		{
			return CacheHelper.Get<List<string>>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
                    dataContext = new UsersDataContext();
					var val = dataContext.ServiceConfigurations.Where(s => !s.IsDeleted).FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						var delimiters = strict ? new[] { Environment.NewLine, "\n" } : new[] { Environment.NewLine, ",", "\n", "\t" };

						return val.Value == null 
							? new List<string>()
							: val.Value
								.Split(delimiters, StringSplitOptions.RemoveEmptyEntries)
								.ToList();
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static List<int> GetIntegerList(int id)
		{
			return CacheHelper.Get<List<int>>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
                    dataContext = new UsersDataContext();
					var val = dataContext.ServiceConfigurations.Where(s => !s.IsDeleted).FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value
							.Split(new[] { Environment.NewLine, ",", "\n", "\t" }, StringSplitOptions.RemoveEmptyEntries)
							.Select(s => {
							    int iVal;
								if (int.TryParse(s, out iVal)) return iVal;
								return -1;})
							.Where(n => n > -1)
							.ToList();
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}
	}
}

