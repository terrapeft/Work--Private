//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UsersDb
{
	using System.Linq;
	using System.ServiceModel;
	using System.Threading.Tasks;
    using UsersDb.DataContext;

	using SharedLibrary.Cache;

	public class Resources
	{
		private const string NO_RESOURCE_FOUND = "Resource string was not found.";
		private static UsersDataContext dataContext = new UsersDataContext();
		private static object _lock = new object();

		public static void PreloadAsync()
		{
		    Task.Factory.StartNew(() =>
            {
				GetString(1);
				GetString(2);
				GetString(3);
				GetString(5);
				GetString(6);
				GetString(7);
				GetString(8);
				GetString(9);
				GetString(10);
				GetString(11);
				GetString(12);
				GetString(13);
				GetString(14);
				GetString(15);
				GetString(16);
				GetString(17);
				GetString(19);
				GetString(20);
				GetString(21);
				GetString(22);
				GetString(23);
				GetString(24);
				GetString(25);
				GetString(26);
				GetString(27);
				GetString(28);
				GetString(29);
				GetString(30);
				GetString(32);
				GetString(33);
				GetString(34);
            });
		    
            Task.WaitAll();
		}

		/// <summary>
		/// When user requests some data from the service and returned DataSet has no tables, this message will occur. In current implementation most likely this message won't ever occur.
		/// </summary>
		public static string Dataset_Is_Null_Or_Empty { get { return GetString(1); } }

		/// <summary>
		/// When therу are no results to return for user's request, this message is provided.
		/// </summary>
		public static string Dataset_No_Tables { get { return GetString(2); } }

		/// <summary>
		/// When user requests a help for the method(s), this is a part of generated help for the case when method has no parameters.
		/// </summary>
		public static string Help_Has_No_Input_Params { get { return GetString(3); } }

		/// <summary>
		/// This is a common part of help, which is generated for the help request.
		/// </summary>
		public static string Help_Options { get { return GetString(5); } }

		/// <summary>
		/// When user requests help for the method without parameters, this message appears.
		/// When parameters are specified it is possible to execute the procedure and obtain output details, so it is suggested to do.
		/// </summary>
		public static string Help_Sp_Suggest_To_Specify_Params { get { return GetString(6); } }

		/// <summary>
		/// User will see the message in case he attempts to call the method with unsupported data format, for example call search with format set to "list".
		/// </summary>
		public static string Not_Implemented_Message { get { return GetString(7); } }

		/// <summary>
		/// Exception message, shown on request parameters validation.
		/// </summary>
		public static string Service_No_SP_Name { get { return GetString(8); } }

		/// <summary>
		/// Exception message, shown on request parameters validation.
		/// </summary>
		public static string Service_Parameter_Is_Null { get { return GetString(9); } }

		/// <summary>
		/// Notification email body.
		/// </summary>
		public static string Email_Account_Locked_Body { get { return GetString(10); } }

		/// <summary>
		/// Notification email subject.
		/// </summary>
		public static string Email_Account_Locked_Subject { get { return GetString(11); } }

		/// <summary>
		/// User may see this message in response for his request.
		/// </summary>
		public static string Error_401_No_Credentials { get { return GetString(12); } }

		/// <summary>
		/// Threshold limit exceeded.
		/// </summary>
		public static string Error_403_Exceeds_Hits { get { return GetString(13); } }

		/// <summary>
		/// Occurs when user is not authorized to use the requested method.
		/// </summary>
		public static string Error_405_Method_Not_Allowed { get { return GetString(14); } }

		/// <summary>
		/// Occurs when clients IP is not in allowed list.
		/// </summary>
		public static string Error_403_Restricted_IP { get { return GetString(15); } }

		/// <summary>
		/// When some fault is occured in the service, this message will be sent to the client. Usage Stats will contain some information about the error and Error log will contain technical details.
		/// </summary>
		public static string Error_500 { get { return GetString(16); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Error_401_Incorrect_Credentials { get { return GetString(17); } }

		/// <summary>
		/// Occurs in Admin UI on attempt to save a duplicate, like username.
		/// </summary>
		public static string Unique_Constraint_Violation_Error { get { return GetString(19); } }

		/// <summary>
		/// The real values of protected columns will be replaced with this message in search results
		/// </summary>
		public static string Search_Results_Require_Permission { get { return GetString(20); } }

		/// <summary>
		/// Displayed on search results page, in the panel caption, when the search text was found in restricted columns.
		/// </summary>
		public static string Search_Results_Found_In_Restricted_Column { get { return GetString(21); } }

		/// <summary>
		/// When using Search and providing some parmaeters without values, like 
		/// 
		/// http://127.0.0.1/count?&ec=&ct=
		/// </summary>
		public static string Error_400_No_Parameter_Value { get { return GetString(22); } }

		/// <summary>
		/// Search keyword was not specified for Search request.
		/// </summary>
		public static string Error_400_No_Keyword { get { return GetString(23); } }

		/// <summary>
		/// Coming expiration notification, can be send only manualy by clicking the 'Notify' link of the 'Recent Expirations' informer.
		/// </summary>
		public static string Account_Expired_Notification_Subject { get { return GetString(24); } }

		/// <summary>
		/// Coming expiration notification, can be send only manualy by clicking the 'Notify' link of the 'Recent Expirations' informer.
		/// </summary>
		public static string Account_Expired_Notification_Body { get { return GetString(25); } }

		/// <summary>
		/// Coming expiration notification, can be send only manualy by clicking the 'Notify' link of the 'Coming Expirations' informer.
		/// </summary>
		public static string Account_Expires_Soon_Notification_Subject { get { return GetString(26); } }

		/// <summary>
		/// Coming expiration notification, can be send only manualy by clicking the 'Notify' link of the 'Coming Expirations' informer.
		/// </summary>
		public static string Account_Expires_Soon_Notification_Body { get { return GetString(27); } }

		/// <summary>
		/// This message is shown when you preview the email template.
		/// </summary>
		public static string TrialAdmin_Reference_to_Trial_CUI_Group { get { return GetString(28); } }

		/// <summary>
		/// Trial request comment, in case user provided existed email.
		/// </summary>
		public static string Trial_Email_Exists { get { return GetString(29); } }

		/// <summary>
		/// When user requests a list of methods and there is no any available.
		/// </summary>
		public static string Error_404_Packages_Not_Found { get { return GetString(30); } }

		/// <summary>
		/// Shown on the login control panel, which becomes visible on failed attempt.
		/// 
		/// {0} stands for an email,
		/// {1} stands for a phone number
		/// </summary>
		public static string CUI_Invalid_Login_Attempt_Label { get { return GetString(32); } }

		/// <summary>
		/// {0} stands for the name provided in the submission form.
		/// </summary>
		public static string Submit_Trial_Request_Success { get { return GetString(33); } }

		/// <summary>
		/// When user submits a trial request, but something goes wrong.
		/// </summary>
		public static string Submit_Trial_Error { get { return GetString(34); } }


		private static string GetString(int id)
		{
			return CacheHelper.Get<string>("Resource" + id, () =>
			{
				lock (_lock)
				{
					var val = dataContext.Resources.Where(r => !r.IsDeleted).FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value;
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

	}
}

