<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Output.tt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.ServiceModel" #>
<#@ assembly name="$(SolutionDir)bin\Db.dll" #>
<#@ assembly name="$(SolutionDir)bin\SharedLibrary.dll" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="System.IO" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.ServiceModel" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="Db" #>
<#@ import namespace="SharedLibrary.Cache" #>
<#@ output extension="cs" #>
<#
	var doc = XElement.Load(Host.ResolvePath(@"..\app.config"));
	var cnElem = doc.Elements("connectionStrings").Elements().FirstOrDefault(cn => cn.Attribute("name").Value == "StatixEntities");
	var connectionString = cnElem.Attribute("connectionString").Value;
	
	var dc = new StatixEntities(connectionString);
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Db
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.ServiceModel;

	using SharedLibrary.Cache;

	public class ServiceConfig
	{
		private static object _lock = new object();
		private const string NO_RESOURCE_FOUND = "Requested string was not found.";

		public static void PreloadAsync()
		{
            Task.Factory.StartNew(() =>
            {
				using (var dc = new StatixEntities())
				{
<#
	foreach (var sc in dc.ServiceConfigurations) {

	if (sc.ResourceType.Id == 1) { #>
					GetString(<#= sc.Id #>);
<#
	}
	else if (sc.ResourceType.Id == 2) { #>
					GetInt(<#= sc.Id #>);
<#
	}
	else if (sc.ResourceType.Id == 3) { #>
					GetStringList(<#= sc.Id #>, false);
<#
	}
	else if (sc.ResourceType.Id == 4) { #>
					GetIntegerList(<#= sc.Id #>);
<#
	}
	else if (sc.ResourceType.Id == 5) { #>
					GetBoolean(<#= sc.Id #>);
<#
	}
	else if (sc.ResourceType.Id == 6) { #>
					GetStringList(<#= sc.Id #>, true);
<# }}
#>
				}
            });
		    
            Task.WaitAll();
		}

<#
	foreach (var sc in dc.ServiceConfigurations) {

	if (sc.ResourceType.Id == 1) { #>

		/// <summary>
		/// <#= (sc.Description ?? string.Empty).Replace("\n", "\n\t\t/// ") #>
		/// </summary>
		public static string <#=sc.Name.Replace(" ", "_")#> { get { return GetString(<#= sc.Id #>); } }
<#
	}
	else if (sc.ResourceType.Id == 2) { #>

		/// <summary>
		/// <#= (sc.Description ?? string.Empty).Replace("\n", "\n\t\t/// ") #>
		/// </summary>
		public static int <#=sc.Name.Replace(" ", "_")#> { get { return GetInt(<#= sc.Id #>); } }
<#
	}
	else if (sc.ResourceType.Id == 3) { #>

		/// <summary>
		/// <#= (sc.Description ?? string.Empty).Replace("\n", "\n\t\t/// ") #>
		/// </summary>
		public static List<string> <#=sc.Name.Replace(" ", "_")#> { get { return GetStringList(<#= sc.Id #>, false); } }
<#
	}
	else if (sc.ResourceType.Id == 6) { #>

		/// <summary>
		/// <#= (sc.Description ?? string.Empty).Replace("\n", "\n\t\t/// ") #>
		/// </summary>
		public static List<string> <#=sc.Name.Replace(" ", "_")#> { get { return GetStringList(<#= sc.Id #>, true); } }

<#
	}
	else if (sc.ResourceType.Id == 4) { #>

		/// <summary>
		/// <#= (sc.Description ?? string.Empty).Replace("\n", "\n\t\t/// ") #>
		/// </summary>
		public static List<int> <#=sc.Name.Replace(" ", "_")#> { get { return GetIntegerList(<#= sc.Id #>); } }
<#
	}
	else if (sc.ResourceType.Id == 5) { #>

		/// <summary>
		/// <#= (sc.Description ?? string.Empty).Replace("\n", "\n\t\t/// ") #>
		/// </summary>
		public static bool <#=sc.Name.Replace(" ", "_")#> { get { return GetBoolean(<#= sc.Id #>); } }
<# }}
#>

		private static string GetString(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetString(id, dc);
			}
		}

		private static string GetString(int id, StatixEntities dc)
		{
			return CacheHelper.Get<string>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value;
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static bool GetBoolean(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetBoolean(id, dc);
			}
		}

		private static bool GetBoolean(int id, StatixEntities dc)
		{
			return CacheHelper.Get<bool>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return Convert.ToBoolean(val.Value);
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static int GetInt(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetInt(id, dc);
			}
		}

		private static int GetInt(int id, StatixEntities dc)
		{
			return CacheHelper.Get<int>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return Convert.ToInt32(val.Value);
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static List<string> GetStringList(int id, bool strict)
		{
			using (var dc = new StatixEntities())
			{
				return GetStringList(id, strict, dc);
			}
		}

		private static List<string> GetStringList(int id, bool strict, StatixEntities dc)
		{
			return CacheHelper.Get<List<string>>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						var delimiters = strict ? new[] { Environment.NewLine, "\n" } : new[] { Environment.NewLine, ",", " ", "\n", "\t" };

						return val.Value == null 
							? new List<string>()
							: val.Value
								.Split(delimiters, StringSplitOptions.RemoveEmptyEntries)
								.ToList();
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static List<int> GetIntegerList(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetIntegerList(id, dc);
			}
		}

		private static List<int> GetIntegerList(int id, StatixEntities dc)
		{
			return CacheHelper.Get<List<int>>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value
							.Split(new[] { Environment.NewLine, ",", " ", "\n", "\t" }, StringSplitOptions.RemoveEmptyEntries)
							.Select(s => {
							    int iVal;
								if (int.TryParse(s, out iVal)) return iVal;
								return -1;})
							.Where(n => n > -1)
							.ToList();
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}
	}
}

<#+ 

public string AssemblyDirectory()
{
    string codeBase = Assembly.GetExecutingAssembly().CodeBase;
    UriBuilder uri = new UriBuilder(codeBase);
    string path = Uri.UnescapeDataString(uri.Path);
    return Path.GetDirectoryName(path);
}

 #>