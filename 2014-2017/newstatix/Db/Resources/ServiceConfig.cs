
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Db
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.ServiceModel;

	using SharedLibrary.Cache;

	public class ServiceConfig
	{
		private static object _lock = new object();
		private const string NO_RESOURCE_FOUND = "Requested string was not found.";

		public static void PreloadAsync()
		{
            Task.Factory.StartNew(() =>
            {
				using (var dc = new StatixEntities())
				{
					GetString(1);
					GetBoolean(2);
					GetString(3);
					GetInt(4);
					GetString(5);
					GetString(6);
					GetInt(7);
					GetString(8);
					GetInt(9);
					GetString(10);
					GetString(11);
					GetString(12);
					GetString(13);
					GetString(14);
					GetString(15);
					GetString(16);
					GetString(17);
				}
            });
		    
            Task.WaitAll();
		}


		/// <summary>
		/// Is used in the FROM field.
		/// </summary>
		public static string Smtp_Sender { get { return GetString(1); } }

		/// <summary>
		/// This option should be set to True if TLS is enabled.
		/// </summary>
		public static bool Enable_SSL { get { return GetBoolean(2); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Smtp_Host { get { return GetString(3); } }

		/// <summary>
		/// 
		/// </summary>
		public static int Smtp_Port { get { return GetInt(4); } }

		/// <summary>
		/// Email(s) of person(s) in charge to receive notifications from the system.
		/// </summary>
		public static string Smtp_Recipients { get { return GetString(5); } }

		/// <summary>
		/// URL of the web service which provides geolocation details about requested IP.
		/// The expected output is:
		/// 
		/// {
		///   "geoplugin_countryName":"Spain",
		///   "geoplugin_continentCode":"EU"
		/// }
		/// 
		/// It may contain more properties, but only these two are required.
		/// </summary>
		public static string IP_Lookup_URL { get { return GetString(6); } }

		/// <summary>
		/// Number of failed attempts before a user is got locked
		/// </summary>
		public static int Max_Login_Attempts { get { return GetInt(7); } }

		/// <summary>
		/// This email is used on Error.aspx page in suggestion to contact administrator.
		/// </summary>
		public static string Error_500_Contact_Person { get { return GetString(8); } }

		/// <summary>
		/// In UI - how many results to return from service and show on page.
		/// In Service - how many results to return for request without specified Page Size parameter (ps).
		/// 
		/// </summary>
		public static int Search_Results_Page_Size { get { return GetInt(9); } }

		/// <summary>
		/// Used in several places, when html output should have a new line.
		/// </summary>
		public static string New_Line { get { return GetString(10); } }

		/// <summary>
		/// Update template for Audit Parameter to format output before showing in the grid.
		/// 
		/// {0} is for parameter name
		/// {1} is for original value
		/// {2} is for new value
		/// </summary>
		public static string Original_To_New_Template { get { return GetString(11); } }

		/// <summary>
		/// Template for different purposes, when a key-value pair should be formatted for output.
		/// 
		/// {0} is for parameter name
		/// {1} is for parameter value
		/// </summary>
		public static string Key_Value_Template { get { return GetString(12); } }

		/// <summary>
		/// Page to open on start of Admin UI
		/// </summary>
		public static string Default_Page { get { return GetString(13); } }

		/// <summary>
		/// The full name of the uploading banner.
		/// The first placeholder is for the Theme name,
		/// the second is for time, to force image to be refreshed by browser after upload (this only affects the Admin UI).
		/// </summary>
		public static string Banner_Path { get { return GetString(14); } }

		/// <summary>
		/// Content type of a file allowed for upload.
		/// </summary>
		public static string Allowed_Content_Type { get { return GetString(15); } }

		/// <summary>
		/// The URL is tested to contain the specified value, case insensitive.
		/// </summary>
		public static string BNP_Paribas_Marker { get { return GetString(16); } }

		/// <summary>
		/// The URL is tested to contain the specified value, case insensitive.
		/// </summary>
		public static string Newedge_Marker { get { return GetString(17); } }

		private static string GetString(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetString(id, dc);
			}
		}

		private static string GetString(int id, StatixEntities dc)
		{
			return CacheHelper.Get<string>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value;
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static bool GetBoolean(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetBoolean(id, dc);
			}
		}

		private static bool GetBoolean(int id, StatixEntities dc)
		{
			return CacheHelper.Get<bool>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return Convert.ToBoolean(val.Value);
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static int GetInt(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetInt(id, dc);
			}
		}

		private static int GetInt(int id, StatixEntities dc)
		{
			return CacheHelper.Get<int>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return Convert.ToInt32(val.Value);
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static List<string> GetStringList(int id, bool strict)
		{
			using (var dc = new StatixEntities())
			{
				return GetStringList(id, strict, dc);
			}
		}

		private static List<string> GetStringList(int id, bool strict, StatixEntities dc)
		{
			return CacheHelper.Get<List<string>>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						var delimiters = strict ? new[] { Environment.NewLine, "\n" } : new[] { Environment.NewLine, ",", " ", "\n", "\t" };

						return val.Value == null 
							? new List<string>()
							: val.Value
								.Split(delimiters, StringSplitOptions.RemoveEmptyEntries)
								.ToList();
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static List<int> GetIntegerList(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetIntegerList(id, dc);
			}
		}

		private static List<int> GetIntegerList(int id, StatixEntities dc)
		{
			return CacheHelper.Get<List<int>>("ServiceConfig" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.ServiceConfigurations.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value
							.Split(new[] { Environment.NewLine, ",", " ", "\n", "\t" }, StringSplitOptions.RemoveEmptyEntries)
							.Select(s => {
							    int iVal;
								if (int.TryParse(s, out iVal)) return iVal;
								return -1;})
							.Where(n => n > -1)
							.ToList();
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}
	}
}

