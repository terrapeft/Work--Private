//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Db
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.ServiceModel;

	using SharedLibrary.Cache;

	public class Resources
	{
		private const string NO_RESOURCE_FOUND = "Resource string was not found.";
		private static object _lock = new object();

		public static void PreloadAsync()
		{
            Task.Factory.StartNew(() =>
            {
				using (var dc = new StatixEntities())
				{
					GetString(1);
					GetString(2);
					GetString(3);
					GetString(4);
					GetString(5);
					GetString(6);
					GetString(7);
					GetString(8);
					GetString(9);
					GetString(10);
					GetString(11);
					GetString(12);
					GetString(13);
					GetString(14);
					GetString(15);
					GetString(16);
					GetString(17);
					GetString(18);
					GetString(19);
					GetString(20);
					GetString(21);
					GetString(22);
					GetString(23);
					GetString(24);
					GetString(25);
				}
            });
		    
            Task.WaitAll();
		}


		/// <summary>
		/// When user requests some data from the service and returned DataSet has no tables, this message will occur. In current implementation most likely this message won't ever occur.
		/// </summary>
		public static string Dataset_Is_Null_Or_Empty { get { return GetString(1); } }

		/// <summary>
		/// When ther? are no results to return for user's request, this message is provided.
		/// </summary>
		public static string Dataset_No_Tables { get { return GetString(2); } }

		/// <summary>
		/// Notification email body.
		/// </summary>
		public static string Email_Account_Locked_Body { get { return GetString(3); } }

		/// <summary>
		/// Notification email subject.
		/// </summary>
		public static string Email_Account_Locked_Subject { get { return GetString(4); } }

		/// <summary>
		/// User may see this message in response for his request.
		/// </summary>
		public static string Error_401_No_Credentials { get { return GetString(5); } }

		/// <summary>
		/// Occurs when clients IP is not in allowed list.
		/// </summary>
		public static string Error_403_Restricted_IP { get { return GetString(6); } }

		/// <summary>
		/// When some fault is occured in the service, this message will be sent to the client. Usage Stats will contain some information about the error and Error log will contain technical details.
		/// </summary>
		public static string Error_500 { get { return GetString(7); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Error_401_Incorrect_Credentials { get { return GetString(8); } }

		/// <summary>
		/// Occurs in Admin UI on attempt to save a duplicate, like username.
		/// </summary>
		public static string Unique_Constraint_Violation_Error { get { return GetString(9); } }

		/// <summary>
		/// Search keyword was not specified for Search request.
		/// </summary>
		public static string Error_400_No_Keyword { get { return GetString(10); } }

		/// <summary>
		/// Error message displayed when the banner is uploaded of type other then PNG.
		/// 
		/// Placeholder stands for allowed content type, which is taken from the Service Configuration table, the Allowed Content Type parameter.
		/// </summary>
		public static string Restricted_Content_Type { get { return GetString(11); } }

		/// <summary>
		/// For example the Exchanges page, the Memeber column, if there is no link, this value is used.
		/// </summary>
		public static string Link_Is_Not_Available { get { return GetString(12); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Name_Field_Empty { get { return GetString(13); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Email_Field_Empty { get { return GetString(14); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Invalid_Email { get { return GetString(15); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Reg_Email_Recipient { get { return GetString(16); } }

		/// <summary>
		/// {0} stands for user name,
		/// {1} stands for email
		/// </summary>
		public static string Reg_Email_Subject { get { return GetString(17); } }

		/// <summary>
		/// {0} stands for user name,
		/// {1} stands for email
		/// </summary>
		public static string Reg_Email_Body { get { return GetString(18); } }

		/// <summary>
		/// 
		/// </summary>
		public static string Reg_Email_Sender { get { return GetString(19); } }

		/// <summary>
		/// Message is shown on the page after user has submitted his data.
		/// </summary>
		public static string Reg_Email_Confirmation_Message { get { return GetString(20); } }

		/// <summary>
		/// {0} stands for error message
		/// </summary>
		public static string Reg_Email_Error_Message { get { return GetString(21); } }

		/// <summary>
		/// Cookies.html page content.
		/// </summary>
		public static string Stub_Cookie { get { return GetString(22); } }

		/// <summary>
		/// Policy.html page content.
		/// </summary>
		public static string Stub_Privacy_Policy { get { return GetString(23); } }

		/// <summary>
		/// Contacts page content
		/// </summary>
		public static string Stub_Contact_Us { get { return GetString(24); } }

		/// <summary>
		/// Default page content (Home button)
		/// </summary>
		public static string Stub_Default_Page { get { return GetString(25); } }


		private static string GetString(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetString(id, dc);
			}
		}

		private static string GetString(int id, StatixEntities dc)
		{
			return CacheHelper.Get<string>("Resource" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.Resources.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value;
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static bool GetBoolean(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetBoolean(id, dc);
			}
		}

		private static bool GetBoolean(int id, StatixEntities dc)
		{
			return CacheHelper.Get<bool>("Resource" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.Resources.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return Convert.ToBoolean(val.Value);
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static int GetInt(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetInt(id, dc);
			}
		}

		private static int GetInt(int id, StatixEntities dc)
		{
			return CacheHelper.Get<int>("Resource" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.Resources.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return Convert.ToInt32(val.Value);
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static List<string> GetStringList(int id, bool strict)
		{
			using (var dc = new StatixEntities())
			{
				return GetStringList(id, strict, dc);
			}
		}

		private static List<string> GetStringList(int id, bool strict, StatixEntities dc)
		{
			return CacheHelper.Get<List<string>>("Resource" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.Resources.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						var delimiters = strict ? new[] { Environment.NewLine, "\n" } : new[] { Environment.NewLine, ",", " ", "\n", "\t" };

						return val.Value == null 
							? new List<string>()
							: val.Value
								.Split(delimiters, StringSplitOptions.RemoveEmptyEntries)
								.ToList();
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}

		private static List<int> GetIntegerList(int id)
		{
			using (var dc = new StatixEntities())
			{
				return GetIntegerList(id, dc);
			}
		}

		private static List<int> GetIntegerList(int id, StatixEntities dc)
		{
			return CacheHelper.Get<List<int>>("Resource" + id, () =>
			{
				lock (_lock)
				{
					var val = dc.Resources.FirstOrDefault(str => str.Id == id);
					if (val != null)
					{
						return val.Value
							.Split(new[] { Environment.NewLine, ",", " ", "\n", "\t" }, StringSplitOptions.RemoveEmptyEntries)
							.Select(s => {
							    int iVal;
								if (int.TryParse(s, out iVal)) return iVal;
								return -1;})
							.Where(n => n > -1)
							.ToList();
					}

					throw new FaultException(NO_RESOURCE_FOUND);
				}
			});
		}
	}
}

