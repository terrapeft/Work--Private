//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Jnj.ThirdDimension.Data.BarcodeSeries
{
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SeriesDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SeriesDS : global::System.Data.DataSet {
        
        private SeriesEventDataTable tableSeriesEvent;
        
        private SeriesDataTable tableSeries;
        
        private ReservationDataTable tableReservation;
        
        private ReservationStatusDataTable tableReservationStatus;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SeriesDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SeriesDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SeriesEvent"] != null)) {
                    base.Tables.Add(new SeriesEventDataTable(ds.Tables["SeriesEvent"]));
                }
                if ((ds.Tables["Series"] != null)) {
                    base.Tables.Add(new SeriesDataTable(ds.Tables["Series"]));
                }
                if ((ds.Tables["Reservation"] != null)) {
                    base.Tables.Add(new ReservationDataTable(ds.Tables["Reservation"]));
                }
                if ((ds.Tables["ReservationStatus"] != null)) {
                    base.Tables.Add(new ReservationStatusDataTable(ds.Tables["ReservationStatus"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SeriesEventDataTable SeriesEvent {
            get {
                return this.tableSeriesEvent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SeriesDataTable Series {
            get {
                return this.tableSeries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReservationDataTable Reservation {
            get {
                return this.tableReservation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReservationStatusDataTable ReservationStatus {
            get {
                return this.tableReservationStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SeriesDS cln = ((SeriesDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SeriesEvent"] != null)) {
                    base.Tables.Add(new SeriesEventDataTable(ds.Tables["SeriesEvent"]));
                }
                if ((ds.Tables["Series"] != null)) {
                    base.Tables.Add(new SeriesDataTable(ds.Tables["Series"]));
                }
                if ((ds.Tables["Reservation"] != null)) {
                    base.Tables.Add(new ReservationDataTable(ds.Tables["Reservation"]));
                }
                if ((ds.Tables["ReservationStatus"] != null)) {
                    base.Tables.Add(new ReservationStatusDataTable(ds.Tables["ReservationStatus"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSeriesEvent = ((SeriesEventDataTable)(base.Tables["SeriesEvent"]));
            if ((initTable == true)) {
                if ((this.tableSeriesEvent != null)) {
                    this.tableSeriesEvent.InitVars();
                }
            }
            this.tableSeries = ((SeriesDataTable)(base.Tables["Series"]));
            if ((initTable == true)) {
                if ((this.tableSeries != null)) {
                    this.tableSeries.InitVars();
                }
            }
            this.tableReservation = ((ReservationDataTable)(base.Tables["Reservation"]));
            if ((initTable == true)) {
                if ((this.tableReservation != null)) {
                    this.tableReservation.InitVars();
                }
            }
            this.tableReservationStatus = ((ReservationStatusDataTable)(base.Tables["ReservationStatus"]));
            if ((initTable == true)) {
                if ((this.tableReservationStatus != null)) {
                    this.tableReservationStatus.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SeriesDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/LSDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSeriesEvent = new SeriesEventDataTable();
            base.Tables.Add(this.tableSeriesEvent);
            this.tableSeries = new SeriesDataTable();
            base.Tables.Add(this.tableSeries);
            this.tableReservation = new ReservationDataTable();
            base.Tables.Add(this.tableReservation);
            this.tableReservationStatus = new ReservationStatusDataTable();
            base.Tables.Add(this.tableReservationStatus);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSeriesEvent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSeries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReservation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReservationStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SeriesDS ds = new SeriesDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SeriesEventRowChangeEventHandler(object sender, SeriesEventRowChangeEvent e);
        
        public delegate void SeriesRowChangeEventHandler(object sender, SeriesRowChangeEvent e);
        
        public delegate void ReservationRowChangeEventHandler(object sender, ReservationRowChangeEvent e);
        
        public delegate void ReservationStatusRowChangeEventHandler(object sender, ReservationStatusRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SeriesEventDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnINFORMATION;
            
            private global::System.Data.DataColumn columnEVENT_DATE;
            
            private global::System.Data.DataColumn columnPERSON_ID;
            
            private global::System.Data.DataColumn columnSERIES_ID;
            
            private global::System.Data.DataColumn columnEVENT_TYPE_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesEventDataTable() {
                this.TableName = "SeriesEvent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SeriesEventDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SeriesEventDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INFORMATIONColumn {
                get {
                    return this.columnINFORMATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EVENT_DATEColumn {
                get {
                    return this.columnEVENT_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PERSON_IDColumn {
                get {
                    return this.columnPERSON_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERIES_IDColumn {
                get {
                    return this.columnSERIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EVENT_TYPE_IDColumn {
                get {
                    return this.columnEVENT_TYPE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesEventRow this[int index] {
                get {
                    return ((SeriesEventRow)(this.Rows[index]));
                }
            }
            
            public event SeriesEventRowChangeEventHandler SeriesEventRowChanging;
            
            public event SeriesEventRowChangeEventHandler SeriesEventRowChanged;
            
            public event SeriesEventRowChangeEventHandler SeriesEventRowDeleting;
            
            public event SeriesEventRowChangeEventHandler SeriesEventRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSeriesEventRow(SeriesEventRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesEventRow AddSeriesEventRow(decimal ID, string INFORMATION, System.DateTime EVENT_DATE, decimal PERSON_ID, decimal SERIES_ID, decimal EVENT_TYPE_ID) {
                SeriesEventRow rowSeriesEventRow = ((SeriesEventRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        INFORMATION,
                        EVENT_DATE,
                        PERSON_ID,
                        SERIES_ID,
                        EVENT_TYPE_ID};
                rowSeriesEventRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSeriesEventRow);
                return rowSeriesEventRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SeriesEventDataTable cln = ((SeriesEventDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SeriesEventDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnINFORMATION = base.Columns["INFORMATION"];
                this.columnEVENT_DATE = base.Columns["EVENT_DATE"];
                this.columnPERSON_ID = base.Columns["PERSON_ID"];
                this.columnSERIES_ID = base.Columns["SERIES_ID"];
                this.columnEVENT_TYPE_ID = base.Columns["EVENT_TYPE_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnINFORMATION = new global::System.Data.DataColumn("INFORMATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINFORMATION);
                this.columnEVENT_DATE = new global::System.Data.DataColumn("EVENT_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEVENT_DATE);
                this.columnPERSON_ID = new global::System.Data.DataColumn("PERSON_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPERSON_ID);
                this.columnSERIES_ID = new global::System.Data.DataColumn("SERIES_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERIES_ID);
                this.columnEVENT_TYPE_ID = new global::System.Data.DataColumn("EVENT_TYPE_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEVENT_TYPE_ID);
                this.columnID.AllowDBNull = false;
                this.columnINFORMATION.MaxLength = 4000;
                this.columnEVENT_DATE.AllowDBNull = false;
                this.columnPERSON_ID.AllowDBNull = false;
                this.columnSERIES_ID.AllowDBNull = false;
                this.columnEVENT_TYPE_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesEventRow NewSeriesEventRow() {
                return ((SeriesEventRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SeriesEventRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SeriesEventRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SeriesEventRowChanged != null)) {
                    this.SeriesEventRowChanged(this, new SeriesEventRowChangeEvent(((SeriesEventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SeriesEventRowChanging != null)) {
                    this.SeriesEventRowChanging(this, new SeriesEventRowChangeEvent(((SeriesEventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SeriesEventRowDeleted != null)) {
                    this.SeriesEventRowDeleted(this, new SeriesEventRowChangeEvent(((SeriesEventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SeriesEventRowDeleting != null)) {
                    this.SeriesEventRowDeleting(this, new SeriesEventRowChangeEvent(((SeriesEventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSeriesEventRow(SeriesEventRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SeriesDS ds = new SeriesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SeriesEventDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SeriesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnRESET_TYPE_ID;
            
            private global::System.Data.DataColumn columnDB_CONNECTION;
            
            private global::System.Data.DataColumn columnDB_SEQUENCE;
            
            private global::System.Data.DataColumn columnRANGE_DEFINITION;
            
            private global::System.Data.DataColumn columnRANGE_START_FROM;
            
            private global::System.Data.DataColumn columnDB_CHECK_QUERY;
            
            private global::System.Data.DataColumn columnLAST_PERSON_ID;
            
            private global::System.Data.DataColumn columnLAST_DATE;
            
            private global::System.Data.DataColumn columnOWNER_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesDataTable() {
                this.TableName = "Series";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SeriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SeriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESET_TYPE_IDColumn {
                get {
                    return this.columnRESET_TYPE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DB_CONNECTIONColumn {
                get {
                    return this.columnDB_CONNECTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DB_SEQUENCEColumn {
                get {
                    return this.columnDB_SEQUENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RANGE_DEFINITIONColumn {
                get {
                    return this.columnRANGE_DEFINITION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RANGE_START_FROMColumn {
                get {
                    return this.columnRANGE_START_FROM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DB_CHECK_QUERYColumn {
                get {
                    return this.columnDB_CHECK_QUERY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LAST_PERSON_IDColumn {
                get {
                    return this.columnLAST_PERSON_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LAST_DATEColumn {
                get {
                    return this.columnLAST_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IDColumn {
                get {
                    return this.columnOWNER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRow this[int index] {
                get {
                    return ((SeriesRow)(this.Rows[index]));
                }
            }
            
            public event SeriesRowChangeEventHandler SeriesRowChanging;
            
            public event SeriesRowChangeEventHandler SeriesRowChanged;
            
            public event SeriesRowChangeEventHandler SeriesRowDeleting;
            
            public event SeriesRowChangeEventHandler SeriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSeriesRow(SeriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRow AddSeriesRow(decimal ID, string NAME, string DESCRIPTION, decimal RESET_TYPE_ID, string DB_CONNECTION, string DB_SEQUENCE, string RANGE_DEFINITION, decimal RANGE_START_FROM, string DB_CHECK_QUERY, decimal LAST_PERSON_ID, System.DateTime LAST_DATE, decimal OWNER_ID) {
                SeriesRow rowSeriesRow = ((SeriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        NAME,
                        DESCRIPTION,
                        RESET_TYPE_ID,
                        DB_CONNECTION,
                        DB_SEQUENCE,
                        RANGE_DEFINITION,
                        RANGE_START_FROM,
                        DB_CHECK_QUERY,
                        LAST_PERSON_ID,
                        LAST_DATE,
                        OWNER_ID};
                rowSeriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSeriesRow);
                return rowSeriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SeriesDataTable cln = ((SeriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SeriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnRESET_TYPE_ID = base.Columns["RESET_TYPE_ID"];
                this.columnDB_CONNECTION = base.Columns["DB_CONNECTION"];
                this.columnDB_SEQUENCE = base.Columns["DB_SEQUENCE"];
                this.columnRANGE_DEFINITION = base.Columns["RANGE_DEFINITION"];
                this.columnRANGE_START_FROM = base.Columns["RANGE_START_FROM"];
                this.columnDB_CHECK_QUERY = base.Columns["DB_CHECK_QUERY"];
                this.columnLAST_PERSON_ID = base.Columns["LAST_PERSON_ID"];
                this.columnLAST_DATE = base.Columns["LAST_DATE"];
                this.columnOWNER_ID = base.Columns["OWNER_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnRESET_TYPE_ID = new global::System.Data.DataColumn("RESET_TYPE_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESET_TYPE_ID);
                this.columnDB_CONNECTION = new global::System.Data.DataColumn("DB_CONNECTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDB_CONNECTION);
                this.columnDB_SEQUENCE = new global::System.Data.DataColumn("DB_SEQUENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDB_SEQUENCE);
                this.columnRANGE_DEFINITION = new global::System.Data.DataColumn("RANGE_DEFINITION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRANGE_DEFINITION);
                this.columnRANGE_START_FROM = new global::System.Data.DataColumn("RANGE_START_FROM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRANGE_START_FROM);
                this.columnDB_CHECK_QUERY = new global::System.Data.DataColumn("DB_CHECK_QUERY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDB_CHECK_QUERY);
                this.columnLAST_PERSON_ID = new global::System.Data.DataColumn("LAST_PERSON_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAST_PERSON_ID);
                this.columnLAST_DATE = new global::System.Data.DataColumn("LAST_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAST_DATE);
                this.columnOWNER_ID = new global::System.Data.DataColumn("OWNER_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER_ID);
                this.columnID.AllowDBNull = false;
                this.columnNAME.AllowDBNull = false;
                this.columnNAME.MaxLength = 128;
                this.columnDESCRIPTION.MaxLength = 256;
                this.columnDB_CONNECTION.MaxLength = 1024;
                this.columnDB_SEQUENCE.MaxLength = 128;
                this.columnRANGE_DEFINITION.AllowDBNull = false;
                this.columnRANGE_DEFINITION.MaxLength = 4000;
                this.columnDB_CHECK_QUERY.AllowDBNull = false;
                this.columnLAST_PERSON_ID.AllowDBNull = false;
                this.columnLAST_DATE.AllowDBNull = false;
                this.columnOWNER_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRow NewSeriesRow() {
                return ((SeriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SeriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SeriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SeriesRowChanged != null)) {
                    this.SeriesRowChanged(this, new SeriesRowChangeEvent(((SeriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SeriesRowChanging != null)) {
                    this.SeriesRowChanging(this, new SeriesRowChangeEvent(((SeriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SeriesRowDeleted != null)) {
                    this.SeriesRowDeleted(this, new SeriesRowChangeEvent(((SeriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SeriesRowDeleting != null)) {
                    this.SeriesRowDeleting(this, new SeriesRowChangeEvent(((SeriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSeriesRow(SeriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SeriesDS ds = new SeriesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SeriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReservationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnOWNER_ID;
            
            private global::System.Data.DataColumn columnMIN_VALUE;
            
            private global::System.Data.DataColumn columnMAX_VALUE;
            
            private global::System.Data.DataColumn columnRESERVATION_STATUS_ID;
            
            private global::System.Data.DataColumn columnLAST_DATE;
            
            private global::System.Data.DataColumn columnLAST_PERSON_ID;
            
            private global::System.Data.DataColumn columnSERIES_ID;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnRESERVATION_STATUS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationDataTable() {
                this.TableName = "Reservation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReservationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReservationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IDColumn {
                get {
                    return this.columnOWNER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MIN_VALUEColumn {
                get {
                    return this.columnMIN_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAX_VALUEColumn {
                get {
                    return this.columnMAX_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESERVATION_STATUS_IDColumn {
                get {
                    return this.columnRESERVATION_STATUS_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LAST_DATEColumn {
                get {
                    return this.columnLAST_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LAST_PERSON_IDColumn {
                get {
                    return this.columnLAST_PERSON_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERIES_IDColumn {
                get {
                    return this.columnSERIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESERVATION_STATUSColumn {
                get {
                    return this.columnRESERVATION_STATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationRow this[int index] {
                get {
                    return ((ReservationRow)(this.Rows[index]));
                }
            }
            
            public event ReservationRowChangeEventHandler ReservationRowChanging;
            
            public event ReservationRowChangeEventHandler ReservationRowChanged;
            
            public event ReservationRowChangeEventHandler ReservationRowDeleting;
            
            public event ReservationRowChangeEventHandler ReservationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReservationRow(ReservationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationRow AddReservationRow(decimal ID, decimal OWNER_ID, decimal MIN_VALUE, decimal MAX_VALUE, decimal RESERVATION_STATUS_ID, System.DateTime LAST_DATE, decimal LAST_PERSON_ID, decimal SERIES_ID, string DESCRIPTION, string RESERVATION_STATUS) {
                ReservationRow rowReservationRow = ((ReservationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        OWNER_ID,
                        MIN_VALUE,
                        MAX_VALUE,
                        RESERVATION_STATUS_ID,
                        LAST_DATE,
                        LAST_PERSON_ID,
                        SERIES_ID,
                        DESCRIPTION,
                        RESERVATION_STATUS};
                rowReservationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReservationRow);
                return rowReservationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReservationDataTable cln = ((ReservationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReservationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnOWNER_ID = base.Columns["OWNER_ID"];
                this.columnMIN_VALUE = base.Columns["MIN_VALUE"];
                this.columnMAX_VALUE = base.Columns["MAX_VALUE"];
                this.columnRESERVATION_STATUS_ID = base.Columns["RESERVATION_STATUS_ID"];
                this.columnLAST_DATE = base.Columns["LAST_DATE"];
                this.columnLAST_PERSON_ID = base.Columns["LAST_PERSON_ID"];
                this.columnSERIES_ID = base.Columns["SERIES_ID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnRESERVATION_STATUS = base.Columns["RESERVATION_STATUS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnOWNER_ID = new global::System.Data.DataColumn("OWNER_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER_ID);
                this.columnMIN_VALUE = new global::System.Data.DataColumn("MIN_VALUE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIN_VALUE);
                this.columnMAX_VALUE = new global::System.Data.DataColumn("MAX_VALUE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAX_VALUE);
                this.columnRESERVATION_STATUS_ID = new global::System.Data.DataColumn("RESERVATION_STATUS_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESERVATION_STATUS_ID);
                this.columnLAST_DATE = new global::System.Data.DataColumn("LAST_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAST_DATE);
                this.columnLAST_PERSON_ID = new global::System.Data.DataColumn("LAST_PERSON_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAST_PERSON_ID);
                this.columnSERIES_ID = new global::System.Data.DataColumn("SERIES_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERIES_ID);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnRESERVATION_STATUS = new global::System.Data.DataColumn("RESERVATION_STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESERVATION_STATUS);
                this.columnID.AllowDBNull = false;
                this.columnOWNER_ID.AllowDBNull = false;
                this.columnMIN_VALUE.AllowDBNull = false;
                this.columnMAX_VALUE.AllowDBNull = false;
                this.columnRESERVATION_STATUS_ID.AllowDBNull = false;
                this.columnLAST_DATE.AllowDBNull = false;
                this.columnLAST_PERSON_ID.AllowDBNull = false;
                this.columnSERIES_ID.AllowDBNull = false;
                this.columnDESCRIPTION.MaxLength = 1024;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationRow NewReservationRow() {
                return ((ReservationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReservationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReservationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReservationRowChanged != null)) {
                    this.ReservationRowChanged(this, new ReservationRowChangeEvent(((ReservationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReservationRowChanging != null)) {
                    this.ReservationRowChanging(this, new ReservationRowChangeEvent(((ReservationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReservationRowDeleted != null)) {
                    this.ReservationRowDeleted(this, new ReservationRowChangeEvent(((ReservationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReservationRowDeleting != null)) {
                    this.ReservationRowDeleting(this, new ReservationRowChangeEvent(((ReservationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReservationRow(ReservationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SeriesDS ds = new SeriesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReservationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReservationStatusDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnNAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationStatusDataTable() {
                this.TableName = "ReservationStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReservationStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReservationStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationStatusRow this[int index] {
                get {
                    return ((ReservationStatusRow)(this.Rows[index]));
                }
            }
            
            public event ReservationStatusRowChangeEventHandler ReservationStatusRowChanging;
            
            public event ReservationStatusRowChangeEventHandler ReservationStatusRowChanged;
            
            public event ReservationStatusRowChangeEventHandler ReservationStatusRowDeleting;
            
            public event ReservationStatusRowChangeEventHandler ReservationStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReservationStatusRow(ReservationStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationStatusRow AddReservationStatusRow(string ID, string NAME) {
                ReservationStatusRow rowReservationStatusRow = ((ReservationStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        NAME};
                rowReservationStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReservationStatusRow);
                return rowReservationStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReservationStatusDataTable cln = ((ReservationStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReservationStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationStatusRow NewReservationStatusRow() {
                return ((ReservationStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReservationStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReservationStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReservationStatusRowChanged != null)) {
                    this.ReservationStatusRowChanged(this, new ReservationStatusRowChangeEvent(((ReservationStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReservationStatusRowChanging != null)) {
                    this.ReservationStatusRowChanging(this, new ReservationStatusRowChangeEvent(((ReservationStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReservationStatusRowDeleted != null)) {
                    this.ReservationStatusRowDeleted(this, new ReservationStatusRowChangeEvent(((ReservationStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReservationStatusRowDeleting != null)) {
                    this.ReservationStatusRowDeleting(this, new ReservationStatusRowChangeEvent(((ReservationStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReservationStatusRow(ReservationStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SeriesDS ds = new SeriesDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReservationStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SeriesEventRow : global::System.Data.DataRow {
            
            private SeriesEventDataTable tableSeriesEvent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SeriesEventRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSeriesEvent = ((SeriesEventDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ID {
                get {
                    return ((decimal)(this[this.tableSeriesEvent.IDColumn]));
                }
                set {
                    this[this.tableSeriesEvent.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INFORMATION {
                get {
                    try {
                        return ((string)(this[this.tableSeriesEvent.INFORMATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INFORMATION\' in table \'SeriesEvent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeriesEvent.INFORMATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EVENT_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableSeriesEvent.EVENT_DATEColumn]));
                }
                set {
                    this[this.tableSeriesEvent.EVENT_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PERSON_ID {
                get {
                    return ((decimal)(this[this.tableSeriesEvent.PERSON_IDColumn]));
                }
                set {
                    this[this.tableSeriesEvent.PERSON_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SERIES_ID {
                get {
                    return ((decimal)(this[this.tableSeriesEvent.SERIES_IDColumn]));
                }
                set {
                    this[this.tableSeriesEvent.SERIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal EVENT_TYPE_ID {
                get {
                    return ((decimal)(this[this.tableSeriesEvent.EVENT_TYPE_IDColumn]));
                }
                set {
                    this[this.tableSeriesEvent.EVENT_TYPE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINFORMATIONNull() {
                return this.IsNull(this.tableSeriesEvent.INFORMATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINFORMATIONNull() {
                this[this.tableSeriesEvent.INFORMATIONColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SeriesRow : global::System.Data.DataRow {
            
            private SeriesDataTable tableSeries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SeriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSeries = ((SeriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ID {
                get {
                    return ((decimal)(this[this.tableSeries.IDColumn]));
                }
                set {
                    this[this.tableSeries.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    return ((string)(this[this.tableSeries.NAMEColumn]));
                }
                set {
                    this[this.tableSeries.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    if (this.IsDESCRIPTIONNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSeries.DESCRIPTIONColumn]));
                    }
                }
                set {
                    this[this.tableSeries.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RESET_TYPE_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableSeries.RESET_TYPE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RESET_TYPE_ID\' in table \'Series\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeries.RESET_TYPE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DB_CONNECTION {
                get {
                    if (this.IsDB_CONNECTIONNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSeries.DB_CONNECTIONColumn]));
                    }
                }
                set {
                    this[this.tableSeries.DB_CONNECTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DB_SEQUENCE {
                get {
                    if (this.IsDB_SEQUENCENull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSeries.DB_SEQUENCEColumn]));
                    }
                }
                set {
                    this[this.tableSeries.DB_SEQUENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RANGE_DEFINITION {
                get {
                    return ((string)(this[this.tableSeries.RANGE_DEFINITIONColumn]));
                }
                set {
                    this[this.tableSeries.RANGE_DEFINITIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RANGE_START_FROM {
                get {
                    try {
                        return ((decimal)(this[this.tableSeries.RANGE_START_FROMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RANGE_START_FROM\' in table \'Series\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSeries.RANGE_START_FROMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DB_CHECK_QUERY {
                get {
                    return ((string)(this[this.tableSeries.DB_CHECK_QUERYColumn]));
                }
                set {
                    this[this.tableSeries.DB_CHECK_QUERYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LAST_PERSON_ID {
                get {
                    return ((decimal)(this[this.tableSeries.LAST_PERSON_IDColumn]));
                }
                set {
                    this[this.tableSeries.LAST_PERSON_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LAST_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableSeries.LAST_DATEColumn]));
                }
                set {
                    this[this.tableSeries.LAST_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OWNER_ID {
                get {
                    return ((decimal)(this[this.tableSeries.OWNER_IDColumn]));
                }
                set {
                    this[this.tableSeries.OWNER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableSeries.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableSeries.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESET_TYPE_IDNull() {
                return this.IsNull(this.tableSeries.RESET_TYPE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESET_TYPE_IDNull() {
                this[this.tableSeries.RESET_TYPE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDB_CONNECTIONNull() {
                return this.IsNull(this.tableSeries.DB_CONNECTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDB_CONNECTIONNull() {
                this[this.tableSeries.DB_CONNECTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDB_SEQUENCENull() {
                return this.IsNull(this.tableSeries.DB_SEQUENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDB_SEQUENCENull() {
                this[this.tableSeries.DB_SEQUENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRANGE_START_FROMNull() {
                return this.IsNull(this.tableSeries.RANGE_START_FROMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRANGE_START_FROMNull() {
                this[this.tableSeries.RANGE_START_FROMColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReservationRow : global::System.Data.DataRow {
            
            private ReservationDataTable tableReservation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReservationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReservation = ((ReservationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ID {
                get {
                    return ((decimal)(this[this.tableReservation.IDColumn]));
                }
                set {
                    this[this.tableReservation.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OWNER_ID {
                get {
                    return ((decimal)(this[this.tableReservation.OWNER_IDColumn]));
                }
                set {
                    this[this.tableReservation.OWNER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MIN_VALUE {
                get {
                    return ((decimal)(this[this.tableReservation.MIN_VALUEColumn]));
                }
                set {
                    this[this.tableReservation.MIN_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MAX_VALUE {
                get {
                    return ((decimal)(this[this.tableReservation.MAX_VALUEColumn]));
                }
                set {
                    this[this.tableReservation.MAX_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RESERVATION_STATUS_ID {
                get {
                    return ((decimal)(this[this.tableReservation.RESERVATION_STATUS_IDColumn]));
                }
                set {
                    this[this.tableReservation.RESERVATION_STATUS_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LAST_DATE {
                get {
                    return ((global::System.DateTime)(this[this.tableReservation.LAST_DATEColumn]));
                }
                set {
                    this[this.tableReservation.LAST_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LAST_PERSON_ID {
                get {
                    return ((decimal)(this[this.tableReservation.LAST_PERSON_IDColumn]));
                }
                set {
                    this[this.tableReservation.LAST_PERSON_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SERIES_ID {
                get {
                    return ((decimal)(this[this.tableReservation.SERIES_IDColumn]));
                }
                set {
                    this[this.tableReservation.SERIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    if (this.IsDESCRIPTIONNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableReservation.DESCRIPTIONColumn]));
                    }
                }
                set {
                    this[this.tableReservation.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RESERVATION_STATUS {
                get {
                    if (this.IsRESERVATION_STATUSNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableReservation.RESERVATION_STATUSColumn]));
                    }
                }
                set {
                    this[this.tableReservation.RESERVATION_STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableReservation.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableReservation.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESERVATION_STATUSNull() {
                return this.IsNull(this.tableReservation.RESERVATION_STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESERVATION_STATUSNull() {
                this[this.tableReservation.RESERVATION_STATUSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReservationStatusRow : global::System.Data.DataRow {
            
            private ReservationStatusDataTable tableReservationStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReservationStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReservationStatus = ((ReservationStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableReservationStatus.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'ReservationStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReservationStatus.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableReservationStatus.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'ReservationStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReservationStatus.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableReservationStatus.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableReservationStatus.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableReservationStatus.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableReservationStatus.NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SeriesEventRowChangeEvent : global::System.EventArgs {
            
            private SeriesEventRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesEventRowChangeEvent(SeriesEventRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesEventRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SeriesRowChangeEvent : global::System.EventArgs {
            
            private SeriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRowChangeEvent(SeriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SeriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReservationRowChangeEvent : global::System.EventArgs {
            
            private ReservationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationRowChangeEvent(ReservationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReservationStatusRowChangeEvent : global::System.EventArgs {
            
            private ReservationStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationStatusRowChangeEvent(ReservationStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReservationStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591