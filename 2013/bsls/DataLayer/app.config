<?xml version="1.0"?>
<configuration>
	<configSections>
	</configSections>
  <startup>
	</startup>
	<appSettings>
		<add key="InstrumentSql" value="select * from abcdseries100.instrument_v"/>
      <add key="InstrumentTypesSql" value="select * from abcdseries100.instrument_type"/>
		<add key="SequenceSP" value="abcdseries100.sequence_range_pkg.GetSequenceRange"/>
		<add key="SeqCurrVal" value="select last_number from all_sequences where sequence_name = '{0}' and sequence_owner = '{1}'"/>
		<add key="SeriesSql" value="select * from abcdseries100.series"/>
		<add key="InsertSeriesSql" value="insert into abcdseries100.series (id, name, description, reset_type_id, db_connection, db_sequence, range_definition, range_start_from, db_check_query, last_date, last_person_id, owner_id) values (:id, :name, :description, :reset_type_id, :db_connection, :db_sequence, :range_definition, :range_start_from, :db_check_query, :last_date, :last_person_id, :owner_id)"/>
		<add key="UpdateSeriesSql" value="update abcdseries100.series set name = :name, description = :description, reset_type_id = :reset_type_id, db_connection = :db_connection, db_sequence = :db_sequence, range_definition = :range_definition, range_start_from = :range_start_from, db_check_query=:db_check_query, last_date = :last_date, last_person_id = :last_person_id, owner_id = :owner_id where id = :id"/>
		<add key="SeriesSeq" value="barcode_series.label_series_seq"/>
		<add key="SeriesEventsSeq" value="barcode_series.label_series_events_seq"/>
		<add key="RangeReservationSql" value="select * from abcdseries100.reservation"/>
		<add key="DeleteReservationSql" value="delete from abcdseries100.reservation where id = :id"/>
		<add key="InsertEventsSql" value="insert into abcdseries100.series_event (id, information, event_date, person_id, series_id, event_type_id) values (:id, :information, :event_date, :person_id, :series_id, :event_type_id)"/>
		<add key="InsertRangeReservationSql" value="insert into abcdseries100.reservation(id, owner_id, min_value, max_value, min_date_time, max_date_time, reservation_status_id, last_date, last_person_id, series_id, description) values (:id, :owner_id, :min_value, :max_value, :min_date_time, :max_date_time, :reservation_status_id, :last_date, :last_person_id, :series_id, :description)"/>
		<add key="UpdateRangeReservationSql" value="update abcdseries100.reservation set owner_id = :owner_id, min_value = :min_value, max_value = :max_value, min_date_time = :min_date_time, max_date_time = :max_date_time, reservation_status_id = :reservation_status_id, last_date = :last_date, last_person_id = :last_person_id, series_id = :series_id, description = :description where id = :id"/>
		<add key="RangeReservationStatusSql" value="select * from abcdseries100.reservation_status"/>
		<add key="CreateSequence" value="begin abcdseries100.create_sequence('{0}', {1}, 0, 999999999999999999999999999, 1); end;"/>
		<add key="Schema" value="abcdseries100"/>
		<add key="SchemaSql" value="SELECT distinct username FROM all_users ORDER BY username"/>
		<add key="TableSql_Format" value="select view_name from sys.all_views where owner = '{0}' order by view_name"/>
		<add key="FieldSql_Format" value="select column_name from all_tab_columns where table_name = '{0}' and owner = '{1}' and data_type = 'NUMBER' order by column_name"/>
		<add key="SequenceSql_Format" value="select sequence_name from all_sequences where sequence_owner = '{0}' order by sequence_name"/>
		<add key="temp" value="select distinct owner from all_all_tables where temporary = 'N' and status = 'VALID' and owner in (select username from all_users)"/>
		<add key="SequenceArray" value="declare cmd VARCHAR2(300); val NUMBER; begin for i in 1..:p1 loop cmd:='select '|| :p2 ||'.nextval from dual'; execute immediate cmd into val; :p3(i):=val; end loop; end;" comment="This is done to be able to get sequences array from instant database with credentials for those db."/>

      <add key="updateInstrumentTypeSql" value="
          update abcdseries100.instrument_type
          set 
            name=:name, 
            description=:description 
          where code=:code"/>
      <add key="updateInstrumentByNameSql" value="
          update abcdseries100.instrument 
          set 
            url=:url, 
            instrument_type_id=:instrument_type_id, 
            instrument_role_id=:instrument_role_id, 
            hostname=:hostname, 
            port=:port, 
            org_site_id=:org_site_id
          where name=:name"/>
    <add key="updateInstrumentByUrlSql" value="
          update abcdseries100.instrument 
          set 
            name=:name, 
            instrument_type_id=:instrument_type_id, 
            instrument_role_id=:instrument_role_id, 
            hostname=:hostname, 
            port=:port, 
            org_site_id=:org_site_id
          where url=:url"/>
    <add key="insertInstrumentSql" value="
          insert into abcdseries100.instrument 
            (name, url, instrument_type_id, instrument_role_id, hostname, port, org_site_id)
          values
            (:name, :url, :instrument_type_id, :instrument_role_id, :hostname, :port, :org_site_id)"/>
    <add key="insertInstrumentTypeSql" value="
          insert into abcdseries100.instrument_type
            (code, name, description)
          values
            (:code, :name, :description)"/>
    <add key="inventoryInstrumentTypesSql" value="
          select distinct t.code, t.name, t.description
          from inventory400.instrument i 
            join inventory400.instrument_type_role tr on i.instrument_type_id = tr.instrument_type_id
            join inventory400.instrument_type t on tr.instrument_type_id = t.id
          where tr.instrument_role_id = 3"/>
    <add key="inventoryInstrumentsSql" value="
          select i.id, i.name, i.instrument_type_id, tr.instrument_role_id, i.org_site_id, p.hostname, p.port, p.url
          from inventory400.instrument i 
            join inventory400.programmable_instrument p on i.id = p.id
            join inventory400.instrument_type_role tr on i.instrument_type_id = tr.instrument_type_id
          where tr.instrument_role_id = 3 and i.is_deleted = 'N'"/>
	</appSettings>
</configuration>
